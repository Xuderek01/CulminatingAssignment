/*
 * 
 * Date:May 30, 2021
 * Name:Gordon Wu
 * Teacher:Mr.Ho
 * Description: Generates graphs depending on the selected options from user
 * */


import javafx.application.Application;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.XYChart; 
import javafx.scene.chart.NumberAxis;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.FlowPane;
import javafx.scene.chart.CategoryAxis;

public class App extends Application {
  public static void main(String[] args) {
    launch(args);
  }


  /*
  * Description: Decides which graph to use and launches the application. 
  * @author: Gordon Wu
  */
  @Override
  public void start(Stage stage) {
    
    String graphOption = ""; //Assume this option was passed from GUI
    
    if(graphOption.equals("Energy Bar Graph")){
      barGraph(stage);
    }
    else{
      lineGraph(stage);
    }
    
  }


  /*
  * Description: Generates energy bar graph so that user does not need to draw them. 
  * @author: Gordon Wu
  */
  private void barGraph(Stage stage) {
    
    //Initializes variables 
    //Assume these arrays were passed or returned
    double initialInfo[] = {1, 2, 3}; 
    double finalInfo[] = {1, 2, 3}; 
    String initialNames[] = {"1", "2", "3"};
    String finalNames[] = {"1", "2", "3"};
    //Declare axes and barcharts
    CategoryAxis xAxis = new CategoryAxis();
    NumberAxis yAxis = new NumberAxis();
    CategoryAxis xAxis2 = new CategoryAxis();
    NumberAxis yAxis2 = new NumberAxis();
    BarChart<String,Number> bc = new BarChart<String,Number>(xAxis,yAxis); //Create initial bar chart 
    BarChart<String,Number> bc2 = new BarChart<String,Number>(xAxis2,yAxis2); //Create final bar chart

    //Label axes and titles 
    stage.setTitle("Bar Graph"); 
    bc.setTitle("Initial Energy"); 
    bc2.setTitle("Final Energy"); 
    xAxis.setLabel("Initial Energies");       
    yAxis.setLabel("Number of Blocks");
    xAxis2.setLabel("Final Energies");       
    yAxis2.setLabel("Number of Blocks");

    //Make legends invisible 
    bc.setLegendVisible(false); 
    bc2.setLegendVisible(false);  
    
    //Define the series of data and assign data to the chart 
    var intialData = new XYChart.Series<String, Number>(); 
    var finalData = new XYChart.Series<String, Number>(); 

    for(int i = 0; i<initialInfo.length; i++){
      intialData.getData().add(new XYChart.Data<>(initialNames[i], initialInfo[i]));
    }

    for(int j = 0; j<initialInfo.length; j++){
      finalData.getData().add(new XYChart.Data<>(finalNames[j], finalInfo[j]));
    }

    bc.getData().add(intialData); 
    bc2.getData().add(finalData); 
    
    //Setting up the bar chart
    FlowPane root = new FlowPane();
    root.getChildren().addAll(bc, bc2);//Add the 2 bar charts to the flow pane so that the 2 bar charts can be shown side by side 
    Scene scene  = new Scene(root, 600, 800); //Creates the scene, sets width and height. Also adds flow pane to the scene
    stage.setScene(scene); //Sets the scene 
    stage.show(); //Shows the stage
  }

  /*
  * Description: Generates voltage current graph so that user does not need to draw them. Assume constant temperature. 
  * @author: Gordon Wu
  */
  public void lineGraph(Stage stage) {

    //Initialize variables
    //Assume variables were passed or returned 
    double voltage[] = {1, 2, 3}; 
    double current[] = {1, 2, 3}; 

    //Declare axes and label them 
    NumberAxis xAxis = new NumberAxis();
    NumberAxis yAxis = new NumberAxis();
    xAxis.setLabel("Voltage"); 
    yAxis.setLabel("Current"); 

    //Create line chart and set the titles
    LineChart<Number,Number> lineChart = new LineChart<Number,Number>(xAxis,yAxis);  
    stage.setTitle("LineChart");
    lineChart.setTitle("Voltage Current Graph"); 
    
    //Defining and assigning data to the line chart 
    var data = new XYChart.Series<Number, Number>(); 

    for(int i = 0; i<voltage.length;i++){
      data.getData().add(new XYChart.Data<>(voltage[i], current[i]));
    }

    lineChart.getData().add(data); //Adds all the data to the line chart

    //Setting the scene and showing the stage(Window) 
    Scene scene = new Scene(lineChart,800,600); //Sets the width and height 
    stage.setScene(scene);
    stage.show();
  }

  
    
}
